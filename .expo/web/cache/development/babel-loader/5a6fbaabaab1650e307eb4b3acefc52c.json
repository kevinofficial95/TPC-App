{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.useSharedValue) !== undefined;\nvar setGestureState = Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.setGestureState;\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 463937378312;\n          _f.__location = \"/Users/kevinjames/Desktop/TPC-App/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (14:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5304131972715;\n          _f.__location = \"/Users/kevinjames/Desktop/TPC-App/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (23:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 180936263236;\n          _f.__location = \"/Users/kevinjames/Desktop/TPC-App/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (32:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 14407529741256;\n          _f.__location = \"/Users/kevinjames/Desktop/TPC-App/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (41:11)\";\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n      setGestureState: setGestureState,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{REANIMATED_AVAILABLE,setGestureState,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3925022521265;\n    _f.__location = \"/Users/kevinjames/Desktop/TPC-App/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js\";\n    return _f;\n  }()\n};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","REANIMATED_AVAILABLE","setGestureState","Reanimated","GestureStateManager","create","begin","State","console","activate","fail","end"],"mappings":"AAAA,SAAA,UAAA;AACA,SAAA,KAAA;AACA,SAAA,UAAA;AASA,IAAMA,cAAc,GAAGC,UAAU,CAC/B,kFAD+B,CAAjC;AAMA,IAAMC,oBAAoB,GAAG,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,cAAA,MAA7B,SAAA;AACA,IAAMC,eAAe,GAAGC,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAlC,eAAA;AAEA,OAAO,IAAMC,mBAAmB,GAAG;AACjCC,EAAAA,MADiC;AAAA,yBAC3B,UAD2B,EACmB;AAElD,aAAO;AACLC,QAAAA,KAAK;AAAA,iCAAQ;AAEX,gBAAA,oBAAA,EAA0B;AACxBJ,cAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,KAAe,CAAfA;AADF,aAAA,MAEO;AACLM,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAPE,WACA;;AAAA;AAAA,kCAtBX,oBAsBW;AAAA,6BAbX,eAaW;AAAA,wBAbS,UAaT;AAAA;AAAA,qBAbYR,KACrB,CADF;AAaW;AAAA,4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADA;AAULS,QAAAA,QAAQ;AAAA,iCAAQ;AAEd,gBAAA,oBAAA,EAA0B;AACxBP,cAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,MAAe,CAAfA;AADF,aAAA,MAEO;AACLM,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAhBE,WAUG;;AAAA;AAAA,kCA/Bd,oBA+Bc;AAAA,6BAtBd,eAsBc;AAAA,wBAtBM,UAsBN;AAAA;AAAA,sBAtBSR,KACrB,CADF;AAsBc;AAAA,4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAVH;AAmBLU,QAAAA,IAAI;AAAA,iCAAQ;AAEV,gBAAA,oBAAA,EAA0B;AACxBR,cAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,MAAe,CAAfA;AADF,aAAA,MAEO;AACLM,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAzBE,WAmBD;;AAAA;AAAA,kCAxCV,oBAwCU;AAAA,6BA/BV,eA+BU;AAAA,wBA/BU,UA+BV;AAAA;AAAA,sBA/BaR,KACrB,CADF;AA+BU;AAAA,4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAnBC;AA4BLW,QAAAA,GAAG;AAAA,iCAAQ;AAET,gBAAA,oBAAA,EAA0B;AACxBT,cAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,GAAe,CAAfA;AADF,aAAA,MAEO;AACLM,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AACF,WAPE;;AAAA;AAAA,kCAjDT,oBAiDS;AAAA,6BAxCT,eAwCS;AAAA,wBAxCW,UAwCX;AAAA;AAAA,mBAxCcR,KACrB,CADF;AAwCS;AAAA,4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BE,OAAP;AAqCD,KAxCgC;;AAAA;AAAA,4B,oBAAA;AAAA,uBAwB3B,eAxB2B;AAAA;AAAA,eAFd,KAAA,CAAA,KAEc;AAAA,gBAMD,KAAA,CAAA,MANC;AAAA,gBAeD,KAAA,CAAA,MAfC;AAAA,aAwBD,KAAA,CAAA;AAxBC;AAAA,sBA0BpB;AA1BoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}