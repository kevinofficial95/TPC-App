{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useState } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Text, View } from \"../components/Themed\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar TabOneScreen = function TabOneScreen(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showContacts = _useState2[0],\n      setShowContacts = _useState2[1];\n\n  var navigation = useNavigation();\n\n  var contactsArray = require(\"../constants/Contacts.json\");\n\n  var _useState3 = useState(contactsArray),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filteredArray = _useState4[0],\n      setfilteredArray = _useState4[1];\n\n  var handleSearch = function handleSearch(text) {\n    setfilteredArray(contactsArray.filter(function (i) {\n      return i.Name.toLowerCase().includes(text) || i.SpouseName.toLowerCase().includes(text);\n    }));\n  };\n\n  var handleContactClick = function handleContactClick(name, address, Photo, phoneNo, spouseName, spouseNo, email, kids) {\n    navigation.navigate(\"Modal\", {\n      contactname: name,\n      address: address,\n      photo: Photo,\n      phoneNo: phoneNo,\n      spouseName: spouseName,\n      spouseNo: spouseNo,\n      email: email,\n      kids: kids\n    });\n  };\n\n  return _jsx(_Fragment, {\n    children: showContacts && _jsx(ScrollView, {\n      children: _jsx(View, {\n        children: _jsxs(View, {\n          style: styles.DirectoryContainer,\n          children: [_jsx(TextInput, {\n            style: styles.input,\n            placeholder: \"Search By Name.....\",\n            keyboardType: \"name-phone-pad\",\n            onChangeText: function onChangeText(text) {\n              handleSearch(text);\n            }\n          }), filteredArray.map(function (item, i) {\n            return _jsxs(View, {\n              style: styles.contactview,\n              children: [_jsx(Image, {\n                style: styles.tinyLogo,\n                source: {\n                  uri: item.Photo\n                }\n              }, i + 1), _jsx(Text, {\n                style: styles.contacts,\n                onPress: function onPress() {\n                  return handleContactClick(item.Name, item.Address, item.Photo, item.PhoneNumber, item.SpouseName, item.SpousePhNo, item.email, item.kids);\n                },\n                children: item.Name\n              }, i + 2)]\n            }, i);\n          })]\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  LoginContainer: {},\n  info: {\n    top: 390,\n    fontSize: 10,\n    color: 'red',\n    marginLeft: -45\n  },\n  DirectoryContainer: {},\n  contacts: {\n    borderWidth: 0.16,\n    marginTop: -55,\n    height: 100,\n    width: 400,\n    paddingTop: 26,\n    fontWeight: '500',\n    fontSize: 15,\n    paddingLeft: 110\n  },\n  input: {\n    height: 50,\n    width: 350,\n    borderWidth: 0.2,\n    marginTop: 20,\n    borderRadius: 20,\n    padding: 10,\n    marginBottom: 40\n  },\n  tinyLogo: {\n    width: 50,\n    height: 50,\n    borderRadius: 30,\n    marginLeft: 40,\n    marginBottom: -5\n  },\n  contactview: {\n    height: 70,\n    marginTop: 0\n  }\n});\nexport default TabOneScreen;","map":{"version":3,"sources":["/Users/kevinjames/Desktop/TPC-Directory/screens/TabOneScreen.tsx"],"names":["useNavigation","useState","Text","View","TabOneScreen","showContacts","setShowContacts","navigation","contactsArray","require","filteredArray","setfilteredArray","handleSearch","text","filter","i","Name","toLowerCase","includes","SpouseName","handleContactClick","name","address","Photo","phoneNo","spouseName","spouseNo","email","kids","navigate","contactname","photo","styles","DirectoryContainer","input","map","item","contactview","tinyLogo","uri","contacts","Address","PhoneNumber","SpousePhNo","StyleSheet","create","LoginContainer","info","top","fontSize","color","marginLeft","borderWidth","marginTop","height","width","paddingTop","fontWeight","paddingLeft","borderRadius","padding","marginBottom"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { fetchUpdateAsync } from 'expo-updates';\nimport { useEffect, useState } from 'react';\nimport { Alert, ScrollView, StyleSheet, TextInput, Image } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport Login from './Login';\n\nconst TabOneScreen = ({ }: RootTabScreenProps<'TabOne'>) => {\n\n  const [showContacts, setShowContacts] = useState(false)\n\n  const navigation = useNavigation<NativeStackNavigationProp<any>>();\n\n  let contactsArray = require('../constants/Contacts.json');\n  const [filteredArray, setfilteredArray] = useState(contactsArray);\n\n  const handleSearch = (text) => {\n    setfilteredArray(contactsArray.filter(i => i.Name.toLowerCase().includes(text) || i.SpouseName.toLowerCase().includes(text)))\n  }\n\n  const handleContactClick = (name, address, Photo, phoneNo, spouseName, spouseNo, email, kids) => {\n    navigation.navigate(\"Modal\", {\n      contactname: name, address: address, photo: Photo, phoneNo: phoneNo, spouseName: spouseName,\n      spouseNo: spouseNo, email: email, kids: kids\n    })\n  }\n  return (\n\n    <>\n    {/* {!showContacts && <View style={styles.LoginContainer}>\n      <ScrollView >\n      <Login setShowContacts={setShowContacts}></Login>\n      </ScrollView>\n      \n    </View>} */}\n\n    {showContacts && <ScrollView>\n\n    <View>\n        <View style={styles.DirectoryContainer}>\n          <TextInput\n            style={styles.input}\n            placeholder=\"Search By Name.....\"\n            keyboardType=\"name-phone-pad\"\n            onChangeText={text => { handleSearch(text) }} />\n          {filteredArray.map((item, i) => {\n            return (\n              <View style={styles.contactview}\n                key={i}\n              >\n\n                <Image\n                  key={i + 1}\n                  style={styles.tinyLogo}\n                  source={{\n                    uri: item.Photo,\n                  }} />\n                <Text key={i + 2} style={styles.contacts} onPress={() => handleContactClick(item.Name, item.Address, item.Photo, item.PhoneNumber,\n                  item.SpouseName, item.SpousePhNo, item.email, item.kids)}>\n                  {item.Name}\n                </Text>\n              </View>\n\n            );\n\n\n          }\n          )}\n        </View>\n      </View>\n    </ScrollView>}\n\n      \n      </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  LoginContainer: {\n  },\n  info: {\n    top: 390,\n    fontSize: 10,\n    color: 'red',\n    marginLeft: -45\n  },\n  DirectoryContainer: {\n  },\n  contacts: {\n    borderWidth: 0.16,\n    marginTop: -55,\n    height: 100,\n    width: 400,\n    paddingTop: 26,\n    fontWeight: '500',\n    fontSize: 15,\n    paddingLeft: 110\n  },\n  input: {\n    height: 50,\n    width: 350,\n    borderWidth: 0.2,\n    marginTop: 20,\n    borderRadius: 20,\n    padding: 10,\n    marginBottom: 40\n  },\n  tinyLogo: {\n    width: 50,\n    height: 50,\n    borderRadius: 30,\n    marginLeft: 40,\n    marginBottom: -5,\n  },\n  contactview: {\n    height: 70,\n    marginTop: 0,\n  }\n});\n\nexport default TabOneScreen;\n"]},"metadata":{},"sourceType":"module"}