{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Text, View } from \"../components/Themed\";\nimport { useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Login(_ref) {\n  var setShowContacts = _ref.setShowContacts;\n  var image = {\n    uri: \"https://drive.google.com/uc?export=view&id=1FL1aowz7jwqKWgs9yW-CAO5ZyoMftak4\"\n  };\n  var password = 'tpc';\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginButton = _useState2[0],\n      setLoginButton = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var navigation = useNavigation();\n\n  var handleSearch = function handleSearch(text) {\n    if (text == password) {\n      setLoginButton(false);\n    }\n  };\n\n  var handleLoginClick = function handleLoginClick() {\n    setShowContacts(true);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter Your Password...\",\n      keyboardType: \"default\",\n      onChangeText: function onChangeText(text) {\n        handleSearch(text);\n      },\n      secureTextEntry: true\n    }), errorMessage && _jsx(Text, {\n      children: \"Wrong Password\"\n    }), _jsx(Pressable, {\n      style: styles.button,\n      disabled: loginButton,\n      onPress: function onPress() {\n        return handleLoginClick();\n      },\n      children: _jsx(Text, {\n        style: styles.text,\n        children: \"Login\"\n      })\n    }), _jsx(ImageBackground, {\n      source: image,\n      resizeMode: \"cover\",\n      style: styles.tinyLogo\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    alignItems: 'center',\n    flex: 1\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 17,\n    paddingHorizontal: 55,\n    borderRadius: 4,\n    backgroundColor: '#eb5d0c'\n  },\n  text: {\n    fontSize: 16,\n    lineHeight: 21,\n    fontWeight: 'bold',\n    letterSpacing: 0.25,\n    color: 'white'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  input: {\n    height: 50,\n    width: 350,\n    borderWidth: 0.2,\n    marginTop: 70,\n    borderRadius: 20,\n    padding: 10,\n    marginBottom: 40,\n    top: 10\n  },\n  tinyLogo: {\n    width: 390,\n    height: 188,\n    flex: 1,\n    marginTop: 200\n  }\n});","map":{"version":3,"sources":["/Users/kevinjames/Desktop/TPC-Directory/screens/Login.tsx"],"names":["useNavigation","Text","View","useState","Login","setShowContacts","image","uri","password","loginButton","setLoginButton","errorMessage","setErrorMessage","navigation","handleSearch","text","handleLoginClick","styles","container","input","button","tinyLogo","StyleSheet","create","backgroundColor","alignItems","flex","justifyContent","paddingVertical","paddingHorizontal","borderRadius","fontSize","lineHeight","fontWeight","letterSpacing","color","title","separator","marginVertical","height","width","borderWidth","marginTop","padding","marginBottom","top"],"mappings":"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","sourcesContent":["import { Button, Pressable, StyleSheet , TextInput , Image , ImageBackground} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { useEffect, useState } from 'react';\n\nexport default function Login( {setShowContacts}) {\n\n  const image = { uri: \"https://drive.google.com/uc?export=view&id=1FL1aowz7jwqKWgs9yW-CAO5ZyoMftak4\" };\n\n  const password = 'tpc'\n  const[loginButton,setLoginButton] = useState(true);\n  const[errorMessage,setErrorMessage] = useState(false);\n\n\n\n\n\n  const navigation = useNavigation<NativeStackNavigationProp<any>>();\n\n  \n  const handleSearch = (text) => {\n    if(text == password)\n    {\n      setLoginButton(false);\n    }\n   \n  }\n  const handleLoginClick = () => {\n    setShowContacts(true)\n    // navigation.navigate(\"BottomTabs\")\n  }\n\n  return (\n    <View style={styles.container}>\n\n{/*  */}\n\n        <TextInput\n          style={styles.input}\n          placeholder=\"Enter Your Password...\"\n          keyboardType=\"default\"\n          onChangeText={text => { handleSearch(text) }}\n          secureTextEntry = {true}\n\n        />\n\n {errorMessage && <Text>Wrong Password</Text>}\n         \n     <Pressable\n        style={styles.button}\n        disabled = {loginButton}\n        onPress={() =>handleLoginClick()}\n      >\n        <Text style={styles.text}>Login</Text>\n      </Pressable>\n      <ImageBackground source={image} resizeMode=\"cover\" style={styles.tinyLogo}></ImageBackground>\n     \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor : 'white',\n   alignItems : 'center',\n   flex : 1,\n\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 17,\n    paddingHorizontal: 55,\n    borderRadius: 4,\n    backgroundColor: '#eb5d0c',\n  },\n  text: {\n    fontSize: 16,\n    lineHeight: 21,\n    fontWeight: 'bold',\n    letterSpacing: 0.25,\n    color: 'white',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  input: {\n    height: 50,\n    width: 350,\n    borderWidth: 0.2,\n    marginTop: 70,\n    borderRadius: 20,\n    padding: 10,\n    marginBottom: 40,\n    top: 10,\n  },\n  tinyLogo: {\n    width: 390,\n    height: 188,\n    flex : 1,\n   marginTop : 200 \n  }\n});\n"]},"metadata":{},"sourceType":"module"}