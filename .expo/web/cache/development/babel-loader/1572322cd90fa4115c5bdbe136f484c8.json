{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TabFourScreen = function TabFourScreen(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var image = require(\"../assets/images/prayer.jpg\");\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState('john 3:16'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      verse = _useState6[0],\n      setVerse = _useState6[1];\n\n  var handleSearch = function handleSearch() {\n    if (verse.includes('-')) {\n      var newVerse = verse.replace('-', ':');\n      fetch(\"https://bible-api.com/\" + newVerse).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return setData(json);\n      }).catch(function (error) {\n        return console.error(error);\n      }).finally(function () {\n        return setLoading(true);\n      });\n      Keyboard.dismiss;\n    } else {\n      fetch(\"https://bible-api.com/\" + verse).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return setData(json);\n      }).catch(function (error) {\n        return console.error(error);\n      }).finally(function () {\n        return setLoading(true);\n      });\n      Keyboard.dismiss;\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(ImageBackground, {\n      source: image,\n      resizeMode: \"cover\",\n      style: styles.image\n    }), _jsxs(ScrollView, {\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Search By Verse..... For eg: John 3:1 or 3-1\",\n        keyboardType: \"default\",\n        onChangeText: function onChangeText(text) {\n          setVerse(text);\n        }\n      }), _jsx(Button, {\n        title: \"Search\",\n        onPress: handleSearch\n      }), isLoading && _jsxs(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'center'\n        },\n        children: [_jsx(Text, {\n          style: styles.reference,\n          children: data.reference\n        }), _jsx(Text, {\n          style: styles.verse,\n          children: data.text\n        })]\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  reference: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginBottom: 10,\n    fontWeight: '500'\n  },\n  verse: {\n    fontSize: 16,\n    textAlign: 'center'\n  },\n  image: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  input: {\n    height: 50,\n    width: 350,\n    borderWidth: 0.2,\n    marginTop: 20,\n    borderRadius: 20,\n    padding: 10,\n    marginBottom: 40,\n    marginLeft: 19\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'white'\n  }\n});\nexport default TabFourScreen;","map":{"version":3,"sources":["/Users/kevinjames/Desktop/TPC-Directory/screens/TabFourScreen.tsx"],"names":["React","useState","TabFourScreen","image","require","isLoading","setLoading","data","setData","verse","setVerse","handleSearch","includes","newVerse","replace","fetch","then","response","json","catch","error","console","finally","Keyboard","dismiss","styles","container","input","text","flex","flexDirection","justifyContent","reference","StyleSheet","create","fontSize","textAlign","marginBottom","fontWeight","height","width","borderWidth","marginTop","borderRadius","padding","marginLeft","backgroundColor"],"mappings":";;AACA,OAAOA,KAAP,IAAiBC,QAAjB,QAAiC,OAAjC;;;;;;;;;;;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAuC;AAAA;;AACzD,MAAMC,KAAK,GAAGC,OAAO,+BAArB;;AACA,kBAAgCH,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBL,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA0BP,QAAQ,CAAC,WAAD,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAEvB,QAAGF,KAAK,CAACG,QAAN,CAAe,GAAf,CAAH,EACA;AACI,UAAIC,QAAQ,GAAGJ,KAAK,CAACK,OAAN,CAAc,GAAd,EAAkB,GAAlB,CAAf;AACAC,MAAAA,KAAK,4BAA0BF,QAA1B,CAAL,CACCG,IADD,CACM,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OADN,EAECF,IAFD,CAEM,UAACE,IAAD;AAAA,eAAUV,OAAO,CAACU,IAAD,CAAjB;AAAA,OAFN,EAGCC,KAHD,CAGO,UAACC,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAHP,EAICE,OAJD,CAIS;AAAA,eAAMhB,UAAU,CAAC,IAAD,CAAhB;AAAA,OAJT;AAKAiB,MAAAA,QAAQ,CAACC,OAAT;AACH,KATD,MAUK;AACDT,MAAAA,KAAK,4BAA0BN,KAA1B,CAAL,CACCO,IADD,CACM,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OADN,EAECF,IAFD,CAEM,UAACE,IAAD;AAAA,eAAUV,OAAO,CAACU,IAAD,CAAjB;AAAA,OAFN,EAGCC,KAHD,CAGO,UAACC,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAHP,EAICE,OAJD,CAIS;AAAA,eAAMhB,UAAU,CAAC,IAAD,CAAhB;AAAA,OAJT;AAKAiB,MAAAA,QAAQ,CAACC,OAAT;AACH;AAGJ,GAtBD;;AAwBA,SAEI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACI,KAAC,eAAD;AAAiB,MAAA,MAAM,EAAEvB,KAAzB;AAAgC,MAAA,UAAU,EAAC,OAA3C;AAAmD,MAAA,KAAK,EAAEsB,MAAM,CAACtB;AAAjE,MADJ,EAEI,MAAC,UAAD;AAAA,iBACA,KAAC,SAAD;AACI,QAAA,KAAK,EAAEsB,MAAM,CAACE,KADlB;AAEI,QAAA,WAAW,EAAC,8CAFhB;AAGI,QAAA,YAAY,EAAC,SAHjB;AAII,QAAA,YAAY,EAAE,sBAAAC,IAAI,EAAI;AAAElB,UAAAA,QAAQ,CAACkB,IAAD,CAAR;AAAgB;AAJ5C,QADA,EAMA,KAAC,MAAD;AACI,QAAA,KAAK,EAAC,QADV;AAEI,QAAA,OAAO,EAAEjB;AAFb,QANA,EAWCN,SAAS,IAAI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEwB,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,aAAa,EAAE,QAA1B;AAAoCC,UAAAA,cAAc,EAAE;AAApD,SAAb;AAAA,mBACd,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACO,SAApB;AAAA,oBAAgCzB,IAAI,CAACyB;AAArC,UADc,EAEV,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEP,MAAM,CAAChB,KAApB;AAAA,oBAA4BF,IAAI,CAACqB;AAAjC,UAFU;AAAA,QAXd;AAAA,MAFJ;AAAA,IAFJ;AA0BH,CAxDD;;AA0DA,IAAMH,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,SAAS,EAAE;AACPG,IAAAA,QAAQ,EAAE,EADH;AAEPC,IAAAA,SAAS,EAAE,QAFJ;AAGPC,IAAAA,YAAY,EAAE,EAHP;AAIPC,IAAAA,UAAU,EAAE;AAJL,GADkB;AAO7B7B,EAAAA,KAAK,EAAE;AACH0B,IAAAA,QAAQ,EAAE,EADP;AAEHC,IAAAA,SAAS,EAAE;AAFR,GAPsB;AAW7BjC,EAAAA,KAAK,EAAE;AACH0B,IAAAA,IAAI,EAAE,CADH;AAEHE,IAAAA,cAAc,EAAE;AAFb,GAXsB;AAe7BJ,EAAAA,KAAK,EAAE;AACHY,IAAAA,MAAM,EAAE,EADL;AAEHC,IAAAA,KAAK,EAAE,GAFJ;AAGHC,IAAAA,WAAW,EAAE,GAHV;AAIHC,IAAAA,SAAS,EAAE,EAJR;AAKHC,IAAAA,YAAY,EAAE,EALX;AAMHC,IAAAA,OAAO,EAAE,EANN;AAOHP,IAAAA,YAAY,EAAE,EAPX;AAQHQ,IAAAA,UAAU,EAAE;AART,GAfsB;AAyB7BnB,EAAAA,SAAS,EAAE;AACPG,IAAAA,IAAI,EAAE,CADC;AAEPiB,IAAAA,eAAe,EAAE;AAFV;AAzBkB,CAAlB,CAAf;AA+BA,eAAe5C,aAAf","sourcesContent":["\nimport React, {  useState } from 'react';\nimport { StyleSheet, TextInput, Image, Button, Keyboard } from 'react-native';\n\nimport { Text, View, ImageBackground , ScrollView  } from 'react-native';\nimport { RootTabScreenProps } from '../types';\n\nconst TabFourScreen = ({ }: RootTabScreenProps<'TabOne'>) => {\n    const image = require('../assets/images/prayer.jpg')\n    const [isLoading, setLoading] = useState(true)\n    const [data, setData] = useState([])\n    const [verse, setVerse] = useState('john 3:16')\n\n    const handleSearch = () => {\n       \n        if(verse.includes('-'))\n        {\n            var newVerse = verse.replace('-',':')\n            fetch(`https://bible-api.com/${newVerse}`)\n            .then((response) => response.json())\n            .then((json) => setData(json))\n            .catch((error) => console.error(error))\n            .finally(() => setLoading(true))\n            Keyboard.dismiss\n        }\n        else {\n            fetch(`https://bible-api.com/${verse}`)\n            .then((response) => response.json())\n            .then((json) => setData(json))\n            .catch((error) => console.error(error))\n            .finally(() => setLoading(true))\n            Keyboard.dismiss\n        }\n        \n        \n    }\n\n    return (\n       \n        <View style={styles.container}>\n            <ImageBackground source={image} resizeMode=\"cover\" style={styles.image}></ImageBackground>\n            <ScrollView>\n            <TextInput\n                style={styles.input}\n                placeholder=\"Search By Verse..... For eg: John 3:1 or 3-1\"\n                keyboardType='default'\n                onChangeText={text => { setVerse(text) }} />\n            <Button\n                title=\"Search\"\n                onPress={handleSearch}\n            />\n\n            {isLoading && <View style={{ flex: 1, flexDirection: 'column', justifyContent: 'center' }}>\n            <Text style={styles.reference}>{data.reference}</Text>\n                <Text style={styles.verse}>{data.text}</Text>\n            </View>}\n            </ScrollView>\n\n        </View>\n  \n\n\n    )\n}\n\nconst styles = StyleSheet.create({\n    reference: {\n        fontSize: 20,\n        textAlign: 'center',\n        marginBottom: 10,\n        fontWeight: '500'\n    },\n    verse: {\n        fontSize: 16,\n        textAlign: 'center'\n    },\n    image: {\n        flex: 1,\n        justifyContent: \"center\"\n    },\n    input: {\n        height: 50,\n        width: 350,\n        borderWidth: 0.2,\n        marginTop: 20,\n        borderRadius: 20,\n        padding: 10,\n        marginBottom: 40,\n        marginLeft: 19\n    },\n    container: {\n        flex: 1,\n        backgroundColor: 'white'\n    },\n})\n\nexport default TabFourScreen\n"]},"metadata":{},"sourceType":"module"}